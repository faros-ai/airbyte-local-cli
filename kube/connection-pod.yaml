apiVersion: v1
kind: Pod
metadata:
  name: cli-test
spec:
  restartPolicy: Never
  initContainers:
    - name: init
      image: busybox
      workingDir: /config
      volumeMounts:
        - name: pipes-volume
          mountPath: /pipes
        - mountPath: /config
          name: airbyte-config
      command:
        - sh
        - -c
        - |
          mkfifo /pipes/src_out
          mkfifo /pipes/dst_in
          mkfifo /pipes/state
          mkfifo /pipes/discover
          ITERATION=0
          MAX_ITERATION=600
          DISK_USAGE=$(du -s /config | awk '{print $1;}')

          until [ -f FINISHED_UPLOADING -o $ITERATION -ge $MAX_ITERATION ]; do
            ITERATION=$((ITERATION+1))
            LAST_DISK_USAGE=$DISK_USAGE
            DISK_USAGE=$(du -s /config | awk '{print $1;}')
            if [ $DISK_USAGE -gt $LAST_DISK_USAGE ]; then
              ITERATION=0
            fi
            sleep 0.5
          done

          if [ -f FINISHED_UPLOADING ]; then
            echo "All files copied successfully, exiting with code 0..."
            exit 0
          else
            echo "Timeout while attempting to copy to init container, exiting with code 1..."
            exit 1
          fi
  containers:
    - name: source
      image: SRC_DOCKER_IMAGE_PLACEHOLDER
      workingDir: "/config"
      env:
        - name: SOURCE_CONFIG
          value: source_config.json
        - name: SOURCE_CATALOG
          value: source_catalog.json
        - name: INPUT_STATE
          value: input_state.json
      command:
        - sh 
        - -c
        - |
          if [[ ! -s "$SOURCE_CATALOG" ]]; then
            echo "Generating source catalog"
            ((eval "$AIRBYTE_ENTRYPOINT discover --config ${SOURCE_CONFIG}") | tee /pipes/discover | grep -v '"CATALOG"') &
            CHILD_PID=$!
            wait $CHILD_PID
            echo "Completed generating source catalog"
            ITERATION=0
            MAX_ITERATION=10
            until [ ! -s "$SOURCE_CATALOG" -o $ITERATION -ge $MAX_ITERATION ]; do
              ITERATION=$((ITERATION+1))
              sleep 0.5
            done
            if [[ ! -s "$SOURCE_CATALOG" ]]; then
              echo "Timed out waiting for source catalog $SOURCE_CATALOG"
              exit 1
            fi
          fi
          echo "Starting source connector"
          ((eval "$AIRBYTE_ENTRYPOINT read --config ${SOURCE_CONFIG} --catalog ${SOURCE_CATALOG} --state ${INPUT_STATE}" 2>&1 | tee /pipes/src_out) | grep -v '"type":"RECORD"' | grep -v '"type":"STATE"') &
          CHILD_PID=$!

          echo "Source connector: Waiting on CHILD_PID $CHILD_PID"
          wait $CHILD_PID
          EXIT_STATUS=$?
          echo "Source connector EXIT_STATUS: $EXIT_STATUS"
          exit $EXIT_STATUS
      volumeMounts:
        - name: pipes-volume
          mountPath: /pipes
        - mountPath: /config
          name: airbyte-config
      # resources:
      #   limits:
      #     cpu: "3"
      #     memory: 256Mi
      #   requests:
      #     cpu: 500m
      #     memory: 50Mi
    - name: transformer
      image: apteno/alpine-jq
      env:
        - name: DST_STREAM_PREFIX
          value: "DST_STREAM_PREFIX_PLACEHOLDER"
        - name: NEW_STATE
          value: /config/new_state.json
        - name: SOURCE_CATALOG
          value: source_catalog.json
        - name: DESTINATION_CATALOG
          value: destination_catalog.json
        - name: src_catalog_overrides
          value: "SRC_CATALOG_OVERRIDES_PLACEHOLDER"
        - name: full_refresh
          value: "FULL_REFRESH_PLACEHOLDER"
      workingDir: "/config"
      command:
        - sh 
        - -c
        - |
          set -e
          if [[ ! -s "$SOURCE_CATALOG" ]]; then
            echo "Configuring source catalog"
            cat /pipes/discover | jq --arg full_refresh "$full_refresh" --argjson src_catalog_overrides "$src_catalog_overrides" '{ streams: [ .catalog.streams[] | select($src_catalog_overrides[.name].disabled != true) | .incremental = ((.supported_sync_modes|contains(["incremental"])) and ($src_catalog_overrides[.name].sync_mode != "full_refresh") and ($full_refresh != "true")) | { stream: {name: .name, supported_sync_modes: .supported_sync_modes, json_schema: {}}, sync_mode: (if .incremental then "incremental" else "full_refresh" end), destination_sync_mode: ($src_catalog_overrides[.name].destination_sync_mode? // if .incremental then "append" else "overwrite" end)}] }' > $SOURCE_CATALOG
            cat "$SOURCE_CATALOG" | jq ".streams[].stream.name |= \"${DST_STREAM_PREFIX}\" + ." > "$DESTINATION_CATALOG"
            echo "Saved source catalog in $SOURCE_CATALOG and destination catalog in $DESTINATION_CATALOG"
          fi
          echo "Starting processing output of source connector"
          cat /pipes/src_out | jq -cR --unbuffered "fromjson? | select(.type == \"RECORD\" or .type == \"STATE\") | .record.stream |= \"${DST_STREAM_PREFIX}\" + ." > /pipes/dst_in
          cat /pipes/state | jq -cR --unbuffered 'fromjson? | select(.type == "STATE") | .state.data' | tail -n 1 > "$NEW_STATE"
          echo "Completed piping state records"
          ITERATION=0
          MAX_ITERATION=300
          until [ -f FINISHED_DOWNLOADING -o $ITERATION -ge $MAX_ITERATION ]; do
            ITERATION=$((ITERATION+1))
            sleep 0.5
          done
          if [ -f FINISHED_DOWNLOADING ]; then
            echo "New state downloaded successfully. Exiting ..."
            exit 0
          else
            echo "Timeout while waiting for state download"
            exit 1
          fi

      # resources:
      #   requests:
      #     cpu: 500m
      #     memory: 50Mi
      volumeMounts:
        - name: pipes-volume
          mountPath: /pipes
        - mountPath: /config
          name: airbyte-config
    - name: destination
      image: DST_DOCKER_IMAGE_PLACEHOLDER
      workingDir: "/config"
      env:
        - name: DESTINATION_CONFIG
          value: destination_config.json
        - name: DESTINATION_CATALOG
          value: destination_catalog.json
      command:
        - sh 
        - -c
        - |
          ((eval "$AIRBYTE_ENTRYPOINT write --config ${DESTINATION_CONFIG} --catalog ${DESTINATION_CATALOG}" 2>&1 | tee /pipes/state) < /pipes/dst_in) &
          CHILD_PID=$!

          echo "Destination connector: waiting on CHILD_PID $CHILD_PID"
          wait $CHILD_PID
          EXIT_STATUS=$?
          echo "Destination connector EXIT_STATUS: $EXIT_STATUS"
          exit $EXIT_STATUS
        
      volumeMounts:
        - name: pipes-volume
          mountPath: /pipes
        - mountPath: /config
          name: airbyte-config
      # resources:
      #   limits:
      #     cpu: "3"
      #     memory: 256Mi
      #   requests:
      #     cpu: 500m
      #     memory: 50Mi
      # workingDir: /config
    # - name: state
    #   image: apteno/alpine-jq
    #   env:
    #     - name: NEW_STATE
    #       value: /config/new_state.json
    #   workingDir: "/config"
    #   command:
    #     - sh 
    #     - -c
    #     - |
    #       cat /pipes/state | jq -cR --unbuffered 'fromjson? | select(.type == "STATE") | .state.data' | tail -n 1 > "$NEW_STATE"
    #       echo "Completed piping state records"
    #       ITERATION=0
    #       MAX_ITERATION=300
    #       until [ -f FINISHED_DOWNLOADING -o $ITERATION -ge $MAX_ITERATION ]; do
    #         ITERATION=$((ITERATION+1))
    #         sleep 0.5
    #       done
    #       if [ -f FINISHED_DOWNLOADING ]; then
    #         echo "New state downloaded successfully. Exiting ..."
    #         exit 0
    #       else
    #         echo "Timeout while waiting for state download"
    #         exit 1
    #       fi
    #   #   requests:
    #   #     cpu: 500m
    #   #     memory: 50Mi
    #   volumeMounts:
    #     - name: pipes-volume
    #       mountPath: /pipes
    #     - mountPath: /config
    #       name: airbyte-config
  volumes:
    - name: pipes-volume
      emptyDir: {}
    - name: airbyte-config
      emptyDir:
        medium: Memory
