// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runDiscoverCatalog should success with example source 1`] = `
{
  "streams": [
    {
      "default_cursor_field": [
        "updated_at",
      ],
      "json_schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "fields": {
            "properties": {
              "command": {
                "type": "string",
              },
              "number": {
                "type": "integer",
              },
            },
            "type": "object",
          },
          "more_fields": {
            "items": {
              "properties": {
                "name": {
                  "type": "string",
                },
                "nested": {
                  "properties": {
                    "value": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "value": {
                  "type": [
                    "string",
                    "integer",
                  ],
                },
              },
              "type": "object",
            },
            "type": [
              "null",
              "array",
            ],
          },
          "source": {
            "type": "string",
          },
          "uid": {
            "type": "string",
          },
          "updated_at": {
            "type": "integer",
          },
        },
        "type": "object",
      },
      "name": "builds",
      "source_defined_cursor": true,
      "source_defined_primary_key": [
        [
          "uid",
        ],
        [
          "source",
        ],
      ],
      "supported_sync_modes": [
        "full_refresh",
        "incremental",
      ],
    },
  ],
}
`;

exports[`runDiscoverCatalog should success with graphql source 1`] = `
{
  "streams": [
    {
      "default_cursor_field": [],
      "json_schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "message": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "name": "faros_graph",
      "source_defined_cursor": true,
      "supported_sync_modes": [
        "full_refresh",
        "incremental",
      ],
    },
  ],
}
`;

exports[`runDstSync should success 1`] = `"{"format":"base64/gzip","data":"H4sIAAAAAAAAA6tWSkssyi+OTy9KLMhQsqpWyi9Kjw9JTcwFsYtS04pSizNSUxxLfDNzcjKLlawMzY0NzczNLI1NTC3NamtrAc6d5gdAAAAA"}"`;

exports[`runSpec should success with airbyte image 1`] = `"{"type":"SPEC","spec":{"documentationUrl":"https://docs.airbyte.com/integrations/destinations/databricks","connectionSpecification":{"$schema":"http://json-schema.org/draft-07/schema#","title":"Databricks Lakehouse Destination Spec","type":"object","required":["accept_terms","hostname","http_path","database","authentication"],"properties":{"accept_terms":{"title":"Agree to the Databricks JDBC Driver Terms & Conditions","type":"boolean","description":"You must agree to the Databricks JDBC Driver <a href=\\"https://databricks.com/jdbc-odbc-driver-license\\">Terms & Conditions</a> to use this connector.","default":false,"order":1},"hostname":{"title":"Server Hostname","type":"string","description":"Databricks Cluster Server Hostname.","examples":["abc-12345678-wxyz.cloud.databricks.com"],"order":2},"http_path":{"title":"HTTP Path","type":"string","description":"Databricks Cluster HTTP Path.","examples":["sql/1.0/warehouses/0000-1111111-abcd90"],"order":3},"port":{"title":"Port","type":"string","description":"Databricks Cluster Port.","default":"443","examples":["443"],"order":4},"database":{"title":"Databricks Unity Catalog Name","description":"The name of the unity catalog for the database","type":"string","order":5},"schema":{"title":"Default Schema","description":"The default schema tables are written. If not specified otherwise, the \\"default\\" will be used.","type":"string","examples":["default"],"default":"default","order":6},"authentication":{"title":"Authentication","type":"object","description":"Authentication mechanism for Staging files and running queries","default":"OAUTH","order":8,"oneOf":[{"title":"OAuth2 (Recommended)","required":["auth_type","client_id","secret"],"properties":{"auth_type":{"type":"string","const":"OAUTH","order":0},"client_id":{"type":"string","order":1},"secret":{"type":"string","airbyte_secret":true,"order":2}}},{"title":"Personal Access Token","required":["auth_type","personal_access_token"],"properties":{"auth_type":{"type":"string","const":"BASIC","order":0},"personal_access_token":{"type":"string","airbyte_secret":true,"order":1}}}]},"purge_staging_data":{"title":"Purge Staging Files and Tables","type":"boolean","description":"Default to 'true'. Switch it to 'false' for debugging purpose.","default":true,"order":9},"raw_schema_override":{"type":"string","description":"The schema to write raw tables into (default: airbyte_internal)","title":"Raw Table Schema Name","default":"airbyte_internal","order":10}}},"supportsIncremental":true,"supportsNormalization":false,"supportsDBT":false,"supported_destination_sync_modes":["overwrite","append","append_dedup"]}}"`;

exports[`runSpec should success with faros image 1`] = `"{"spec":{"documentationUrl":"https://docs.faros.ai","connectionSpecification":{"$schema":"http://json-schema.org/draft-07/schema#","title":"GraphQL Spec","type":"object","required":["api_key","graph"],"additionalProperties":true,"properties":{"api_url":{"order":0,"type":"string","title":"API URL","description":"The Faros API URL.","default":"https://prod.api.faros.ai","examples":["https://prod.api.faros.ai"]},"api_key":{"order":1,"title":"API Key","type":"string","description":"The Faros API key to use to access the API.","airbyte_secret":true},"graph":{"order":2,"type":"string","title":"Graph name","description":"The graph name.","default":"default"},"query":{"order":4,"type":"string","title":"GraphQL query","description":"The query to execute.","multiline":true},"models_filter":{"order":5,"type":"array","items":{"type":"string"},"title":"Models filter","description":"Only query the following models and skip everything else."},"page_size":{"order":6,"type":"integer","title":"Page Size","description":"Page size to use when paginating through query results.","default":100},"result_model":{"order":7,"type":"string","title":"Result model","description":"Where to place each of the query results in their corresponding output records. E.g Nested - { vcs { pullRequests { nodes: [<record>] } } }, Flat - { vcs_PullRequest: <record> }","default":"Nested","enum":["Nested","Flat"]},"bucket_id":{"order":10,"type":"integer","title":"Bucket Number","description":"Bucket number for this source to determine which portion of models to pull. Use it when distributing the load between multiple sources. Cannot be used in combination with 'GraphQL query'. Please note that V1 graphs do not support opening multiple revisions at once, so only use buckets if writing to a V2 graph on the destination, or not writing at all.","default":1},"bucket_total":{"order":11,"type":"integer","title":"Total Number of Buckets","description":"Total number of buckets to distribute models across. Use it when distributing the load between multiple sources. Cannot be used in combination with 'GraphQL query'. Please note that V1 graphs do not support opening multiple revisions at once, so only use buckets if writing to a V2 graph on the destination, or not writing at all.","default":1},"debug":{"order":1000,"type":"boolean","title":"Debug","description":"Enable debug mode","default":false},"faros_source_id":{"order":1001,"type":"string","title":"The source ID","description":"The ID of the source (aka account)"}}}},"type":"SPEC"}"`;

exports[`runSrcSync should success 1`] = `
"{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","redactedConfig":{"user":"chris"},"sourceType":"example","sourceVersion":***}
{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","sourceStatus":{"status":"SUCCESS"}}
{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","logs":[{"timestamp":***,"message":{"level":30,"msg":"Source version: ***"}},{"timestamp":***,"message":{"level":30,"msg":"Config: {\\"user\\":\\"chris\\"}"}},{"timestamp":***,"message":{"level":30,"msg":"Catalog: {}"}},{"timestamp":***,"message":{"level":30,"msg":"State: {}"}},{"timestamp":***,"message":{"level":30,"msg":"Syncing ExampleSource"}},{"timestamp":***,"message":{"level":30,"msg":"Finished syncing ExampleSource"}}]}
"
`;

exports[`runWizard should success with airbyte image 1`] = `
"{
  "accept_terms": false,
  "hostname": "<UPDATE_THIS_VALUE>",
  "http_path": "<UPDATE_THIS_VALUE>",
  "database": "<UPDATE_THIS_VALUE>"
}"
`;

exports[`runWizard should success with faros image 1`] = `
"{
  "api_key": "<UPDATE_YOUR_CREDENTIAL>",
  "graph": "default"
}"
`;
