// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runDiscoverCatalog should success with example source 1`] = `
{
  "streams": [
    {
      "default_cursor_field": [
        "updated_at",
      ],
      "json_schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "fields": {
            "properties": {
              "command": {
                "type": "string",
              },
              "number": {
                "type": "integer",
              },
            },
            "type": "object",
          },
          "more_fields": {
            "items": {
              "properties": {
                "name": {
                  "type": "string",
                },
                "nested": {
                  "properties": {
                    "value": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "value": {
                  "type": [
                    "string",
                    "integer",
                  ],
                },
              },
              "type": "object",
            },
            "type": [
              "null",
              "array",
            ],
          },
          "source": {
            "type": "string",
          },
          "uid": {
            "type": "string",
          },
          "updated_at": {
            "type": "integer",
          },
        },
        "type": "object",
      },
      "name": "builds",
      "source_defined_cursor": true,
      "source_defined_primary_key": [
        [
          "uid",
        ],
        [
          "source",
        ],
      ],
      "supported_sync_modes": [
        "full_refresh",
        "incremental",
      ],
    },
  ],
}
`;

exports[`runDiscoverCatalog should success with graphql source 1`] = `
{
  "streams": [
    {
      "default_cursor_field": [],
      "json_schema": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "message": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "name": "faros_graph",
      "source_defined_cursor": true,
      "supported_sync_modes": [
        "full_refresh",
        "incremental",
      ],
    },
  ],
}
`;

exports[`runDstSync should success 1`] = `"{"format":"base64/gzip","data":"H4sIAAAAAAAAA6tWSkssyi+OTy9KLMhQsqpWyi9Kjw9JTcwFsYtS04pSizNSUxxLfDNzcjKLlawMzY0NzczNLI1NTC3NamtrAc6d5gdAAAAA"}"`;

exports[`runDstSync should success with srcInputFile 1`] = `"{"format":"base64/gzip","data":"H4sIAAAAAAAAA6tWSkssyi+OTy9KLMhQsqpWyi9Kjw9JTcwFsYtS04pSizNSUxxLfDNzcjKLlawMzY0NzczNLI1NTC3NamtrAc6d5gdAAAAA"}"`;

exports[`runSpec should success with airbyte image 1`] = `
{
  "spec": {
    "connectionSpecification": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "properties": {
        "accept_terms": {
          "default": false,
          "description": "You must agree to the Databricks JDBC Driver <a href="https://databricks.com/jdbc-odbc-driver-license">Terms & Conditions</a> to use this connector.",
          "order": 1,
          "title": "Agree to the Databricks JDBC Driver Terms & Conditions",
          "type": "boolean",
        },
        "authentication": {
          "default": "OAUTH",
          "description": "Authentication mechanism for Staging files and running queries",
          "oneOf": [
            {
              "properties": {
                "auth_type": {
                  "const": "OAUTH",
                  "order": 0,
                  "type": "string",
                },
                "client_id": {
                  "order": 1,
                  "type": "string",
                },
                "secret": {
                  "airbyte_secret": true,
                  "order": 2,
                  "type": "string",
                },
              },
              "required": [
                "auth_type",
                "client_id",
                "secret",
              ],
              "title": "OAuth2 (Recommended)",
            },
            {
              "properties": {
                "auth_type": {
                  "const": "BASIC",
                  "order": 0,
                  "type": "string",
                },
                "personal_access_token": {
                  "airbyte_secret": true,
                  "order": 1,
                  "type": "string",
                },
              },
              "required": [
                "auth_type",
                "personal_access_token",
              ],
              "title": "Personal Access Token",
            },
          ],
          "order": 8,
          "title": "Authentication",
          "type": "object",
        },
        "database": {
          "description": "The name of the unity catalog for the database",
          "order": 5,
          "title": "Databricks Unity Catalog Name",
          "type": "string",
        },
        "hostname": {
          "description": "Databricks Cluster Server Hostname.",
          "examples": [
            "abc-12345678-wxyz.cloud.databricks.com",
          ],
          "order": 2,
          "title": "Server Hostname",
          "type": "string",
        },
        "http_path": {
          "description": "Databricks Cluster HTTP Path.",
          "examples": [
            "sql/1.0/warehouses/0000-1111111-abcd90",
          ],
          "order": 3,
          "title": "HTTP Path",
          "type": "string",
        },
        "port": {
          "default": "443",
          "description": "Databricks Cluster Port.",
          "examples": [
            "443",
          ],
          "order": 4,
          "title": "Port",
          "type": "string",
        },
        "purge_staging_data": {
          "default": true,
          "description": "Default to 'true'. Switch it to 'false' for debugging purpose.",
          "order": 9,
          "title": "Purge Staging Files and Tables",
          "type": "boolean",
        },
        "raw_schema_override": {
          "default": "airbyte_internal",
          "description": "The schema to write raw tables into (default: airbyte_internal)",
          "order": 10,
          "title": "Raw Table Schema Name",
          "type": "string",
        },
        "schema": {
          "default": "default",
          "description": "The default schema tables are written. If not specified otherwise, the "default" will be used.",
          "examples": [
            "default",
          ],
          "order": 6,
          "title": "Default Schema",
          "type": "string",
        },
      },
      "required": [
        "accept_terms",
        "hostname",
        "http_path",
        "database",
        "authentication",
      ],
      "title": "Databricks Lakehouse Destination Spec",
      "type": "object",
    },
    "documentationUrl": "https://docs.airbyte.com/integrations/destinations/databricks",
    "supported_destination_sync_modes": [
      "overwrite",
      "append",
      "append_dedup",
    ],
    "supportsDBT": false,
    "supportsIncremental": true,
    "supportsNormalization": false,
  },
  "type": "SPEC",
}
`;

exports[`runSpec should success with faros image 1`] = `
{
  "spec": {
    "connectionSpecification": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "additionalProperties": true,
      "properties": {
        "api_key": {
          "airbyte_secret": true,
          "description": "The Faros API key to use to access the API.",
          "order": 1,
          "title": "API Key",
          "type": "string",
        },
        "api_url": {
          "default": "https://prod.api.faros.ai",
          "description": "The Faros API URL.",
          "examples": [
            "https://prod.api.faros.ai",
          ],
          "order": 0,
          "title": "API URL",
          "type": "string",
        },
        "bucket_id": {
          "default": 1,
          "description": "Bucket number for this source to determine which portion of models to pull. Use it when distributing the load between multiple sources. Cannot be used in combination with 'GraphQL query'. Please note that V1 graphs do not support opening multiple revisions at once, so only use buckets if writing to a V2 graph on the destination, or not writing at all.",
          "order": 10,
          "title": "Bucket Number",
          "type": "integer",
        },
        "bucket_total": {
          "default": 1,
          "description": "Total number of buckets to distribute models across. Use it when distributing the load between multiple sources. Cannot be used in combination with 'GraphQL query'. Please note that V1 graphs do not support opening multiple revisions at once, so only use buckets if writing to a V2 graph on the destination, or not writing at all.",
          "order": 11,
          "title": "Total Number of Buckets",
          "type": "integer",
        },
        "debug": {
          "default": false,
          "description": "Enable debug mode",
          "order": 1000,
          "title": "Debug",
          "type": "boolean",
        },
        "faros_source_id": {
          "description": "The ID of the source (aka account)",
          "order": 1001,
          "title": "The source ID",
          "type": "string",
        },
        "graph": {
          "default": "default",
          "description": "The graph name.",
          "order": 2,
          "title": "Graph name",
          "type": "string",
        },
        "models_filter": {
          "description": "Only query the following models and skip everything else.",
          "items": {
            "type": "string",
          },
          "order": 5,
          "title": "Models filter",
          "type": "array",
        },
        "page_size": {
          "default": 100,
          "description": "Page size to use when paginating through query results.",
          "order": 6,
          "title": "Page Size",
          "type": "integer",
        },
        "query": {
          "description": "The query to execute.",
          "multiline": true,
          "order": 4,
          "title": "GraphQL query",
          "type": "string",
        },
        "result_model": {
          "default": "Nested",
          "description": "Where to place each of the query results in their corresponding output records. E.g Nested - { vcs { pullRequests { nodes: [<record>] } } }, Flat - { vcs_PullRequest: <record> }",
          "enum": [
            "Nested",
            "Flat",
          ],
          "order": 7,
          "title": "Result model",
          "type": "string",
        },
      },
      "required": [
        "api_key",
        "graph",
      ],
      "title": "GraphQL Spec",
      "type": "object",
    },
    "documentationUrl": "https://docs.faros.ai",
  },
  "type": "SPEC",
}
`;

exports[`runSrcSync should success 1`] = `
"{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","redactedConfig":{"user":"chris"},"sourceType":"example","sourceVersion":***}
{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","sourceStatus":{"status":"SUCCESS"}}
{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","logs":[{"timestamp":***,"message":{"level":30,"msg":"Source version: ***"}},{"timestamp":***,"message":{"level":30,"msg":"Config: {\\"user\\":\\"chris\\"}"}},{"timestamp":***,"message":{"level":30,"msg":"Catalog: {}"}},{"timestamp":***,"message":{"level":30,"msg":"State: {}"}},{"timestamp":***,"message":{"level":30,"msg":"Syncing ExampleSource"}},{"timestamp":***,"message":{"level":30,"msg":"Finished syncing ExampleSource"}}]}
"
`;

exports[`runSrcSync should success with specified output file 1`] = `
"{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","redactedConfig":{"user":"chris"},"sourceType":"example","sourceVersion":***}
{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","sourceStatus":{"status":"SUCCESS"}}
{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","logs":[{"timestamp":***,"message":{"level":30,"msg":"Source version: ***"}},{"timestamp":***,"message":{"level":30,"msg":"Config: {\\"user\\":\\"chris\\"}"}},{"timestamp":***,"message":{"level":30,"msg":"Catalog: {}"}},{"timestamp":***,"message":{"level":30,"msg":"State: {}"}},{"timestamp":***,"message":{"level":30,"msg":"Syncing ExampleSource"}},{"timestamp":***,"message":{"level":30,"msg":"Finished syncing ExampleSource"}}]}
"
`;

exports[`runSrcSync should wait for write to complete 1`] = `
"{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","redactedConfig":{"user":"chris"},"sourceType":"example","sourceVersion":***}
{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","sourceStatus":{"status":"SUCCESS"}}
{"state":{"data":{"format":"base64/gzip","data":"H4sIAAAAAAAAA6uuBQBDv6ajAgAAAA=="}},"type":"STATE","logs":[{"timestamp":***,"message":{"level":30,"msg":"Source version: ***"}},{"timestamp":***,"message":{"level":30,"msg":"Config: {\\"user\\":\\"chris\\"}"}},{"timestamp":***,"message":{"level":30,"msg":"Catalog: {}"}},{"timestamp":***,"message":{"level":30,"msg":"State: {}"}},{"timestamp":***,"message":{"level":30,"msg":"Syncing ExampleSource"}},{"timestamp":***,"message":{"level":30,"msg":"Finished syncing ExampleSource"}}]}
"
`;

exports[`runWizard should success with airbyte image 1`] = `
{
  "accept_terms": false,
  "database": "<UPDATE_THIS_VALUE>",
  "hostname": "<UPDATE_THIS_VALUE>",
  "http_path": "<UPDATE_THIS_VALUE>",
}
`;

exports[`runWizard should success with faros image 1`] = `
{
  "api_key": "<UPDATE_YOUR_CREDENTIAL>",
  "graph": "default",
}
`;
